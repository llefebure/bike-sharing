plot(cos(1:100))
plot(cos(1:100), type = "l")
?sample
X <- 4
x <= 2
x <- 2
x
X
f <- function(N,M) M*(1 - ((M-1)/M)^N)
f(100, 1)
f(100, 2)
f(100, 3)
f(100, 4)
f(100, 50)
f(100, 20)
f(100, 1000)
f(100, 100000)
f <- function(N,M) M*(1 - ((M-1)/M)^N)
f(1, 100)
f(1, 10000)
f(1, 1)
f(1, 10)
f(2, 1)
f(2, 1)
f(2, 2)
f(1000, 5)
f(1000, 6)
f(1000, 1000)
a <- sapply(10000:11000, function(x){
x**2
})
a
sample(c(rep(0, 40), rep(1, 35), rep(2, 20), rep(3, 5)), 1)
sample(c(rep(0, 40), rep(1, 35), rep(2, 20), rep(3, 5)), 1)
sample(c(rep(0, 40), rep(1, 35), rep(2, 20), rep(3, 5)), 1)
sample(c(rep(0, 40), rep(1, 35), rep(2, 20), rep(3, 5)), 1)
genZ <- function(){
sample(c(rep(0, 40), rep(1, 35), rep(2, 20), rep(3, 5)), 1)
}
arr <- sapply(10000:11000, function(x){
xn <- x
t <- 0
while(xn > 0){
xn <- x - 1 + genZ()
t <- t+1
}
return t/x
})
genZ <- function(){
sample(c(rep(0, 40), rep(1, 35), rep(2, 20), rep(3, 5)), 1)
}
arr <- sapply(10000:11000, function(x){
xn <- x
t <- 0
while(xn > 0){
xn <- x - 1 + genZ()
t <- t+1
}
t/x
})
genZ <- function(){
sample(c(rep(0, 40), rep(1, 35), rep(2, 20), rep(3, 5)), 1)
}
arr <- sapply(10900:11000, function(x){
xn <- x
t <- 0
while(xn > 0){
xn <- x - 1 + genZ()
t <- t+1
}
t/x
})
genZ <- function(){
sample(c(rep(0, 40), rep(1, 35), rep(2, 20), rep(3, 5)), 1)
}
arr <- sapply(10900:11000, function(x){
xn <- x
t <- 0
while(xn > 0){
xn <- xn - 1 + genZ()
t <- t+1
}
t/x
})
arr <- sapply(10900:11000, function(x){
xn <- x
t <- 0
while(xn > 0){
xn <- xn - 1 + sample(c(rep(0, 40), rep(1, 35), rep(2, 20), rep(3, 5)), 1)
t <- t+1
}
t/x
})]
plot(arr)
abline(h=10)
arr <- sapply(10900:11000, function(x){
xn <- x
t <- 0
while(xn > 0){
xn <- xn - 1 + sample(c(rep(0, 40), rep(1, 35), rep(2, 20), rep(3, 5)), 1)
t <- t+1
}
t/x
})]
plot(arr)
abline(h=10)
arr <- sapply(10900:11000, function(x){
xn <- x
t <- 0
while(xn > 0){
xn <- xn - 1 + sample(c(rep(0, 40), rep(1, 35), rep(2, 20), rep(3, 5)), 1)
t <- t+1
}
t/x
})
plot(arr)
abline(h=10)
A <- matrix(c(1,2,3,4), nrow = 2)
A
A %*% A
n <- A
for(i in 1:100){
n <- n %*% A
}
n
x = runif(100)
y = runif(100)
abs(sqrt(x) - sqrt(y)) < abs(x - y)
abs(sqrt(x) - sqrt(y)) <= abs(x - y)
x[33]
y[33]
sqrt(x[33]) - sqrt(y[33])
x - y
sqrt(x[33]) - sqrt(y[33])
x[33] - y[33]
plot(x, sqrt(x))
abs(sqrt(x) - sqrt(y))
abs(sqrt(x) - sqrt(y)) < abs(x-y)
x[65]
y[65]
abs(sqrt(x[65]) - sqrt(y[65]))
abs(x - y)
abs(sqrt(x[65]) - sqrt(y[65]))
abs(x[65] - y[65])
x
abs(x**1.1 - y**1.1 < abs(x-y)
abs(x**1.1 - y**1.1 < abs(x-y))
abs(x**1.1 - y**1.1) < abs(x-y)
library(gbm)
?gbm
?gbm
?filled.contour
example(filled.contour)
volcano
head(volcano)
Sigma <- matrix(c(1,0,0,0), nrow = 2)
Sigma
Sigma <- matrix(c(1,0,0,0), nrow = 2)
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
f(1,1)
f(1,2)
f(1,10)
f(1,1000)
f(x=1,y=1000)
combn(x, y)
?combn
z <- matrix(0, nrow = length(x))
z
head(z)
Sigma <- matrix(c(1,0,0,0), nrow = 2)
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
x <- seq(from = 0, to = 2, by = .01)
y <- seq(from = 0, to = 2, by = .01)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[i])
}
}
filled.contour(x, y, z)
Sigma <- matrix(c(1,0,0,0), nrow = 2)
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
x <- seq(from = 0, to = 5, by = .01)
y <- seq(from = 0, to = 5, by = .01)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[i])
}
}
filled.contour(x, y, z)
x <- seq(from = 0, to = 5, by = .01)
y <- seq(from = 0, to = 5, by = .01)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[i])
}
}
filled.contour(x, y, z)
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
x <- seq(from = -1, to = 1, by = .01)
y <- seq(from = -1, to = 1, by = .01)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[i])
}
}
filled.contour(x, y, z)
Sigma <- matrix(c(1,0,4,0), nrow = 2)
Sigma
Sigma <- matrix(c(1,4,0,0), nrow = 2)
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
x <- seq(from = -1, to = 1, by = .01)
y <- seq(from = -1, to = 1, by = .01)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[i])
}
}
filled.contour(x, y, z)
Sigma <- matrix(c(1,4,0,0), nrow = 2)
Sigma
Sigma <- matrix(c(1,0,4,0), nrow = 2)
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
x <- seq(from = -1, to = 1, by = .01)
y <- seq(from = -1, to = 1, by = .01)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[i])
}
}
filled.contour(x, y, z)
Sigma <- matrix(c(1,0,4,0), nrow = 2)
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
x <- seq(from = -1, to = 1, by = .1)
y <- seq(from = -1, to = 1, by = .1)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[i])
}
}
filled.contour(x, y, z)
Sigma <- matrix(c(1,4,0,0), nrow = 2)
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
x <- seq(from = -1, to = 1, by = .1)
y <- seq(from = -1, to = 1, by = .1)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[i])
}
}
filled.contour(x, y, z)
Sigma <- matrix(c(1,4,0,0), nrow = 2)
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
x <- seq(from = -1, to = 1, by = .1)
y <- seq(from = -1, to = 1, by = .1)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[i])
}
}
filled.contour(x, y, z)
Sigma <- matrix(c(1,4,0,0), nrow = 2)
Sigma
Sigma <- matrix(c(1,4,0,1), nrow = 2)
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
x <- seq(from = -1, to = 1, by = .1)
y <- seq(from = -1, to = 1, by = .1)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[i])
}
}
filled.contour(x, y, z)
Sigma <- matrix(c(1,4,2,1), nrow = 2)
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
x <- seq(from = -1, to = 1, by = .1)
y <- seq(from = -1, to = 1, by = .1)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[i])
}
}
filled.contour(x, y, z)
Sigma <- matrix(c(1,0,0,1), nrow = 2, byrow = T)
Sigma
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
x <- seq(from = -1, to = 1, by = .1)
y <- seq(from = -1, to = 1, by = .1)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[i])
}
}
filled.contour(x, y, z)
Sigma <- matrix(c(1,0,0,1), nrow = 2, byrow = T)
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
x <- seq(from = -1, to = 1, by = .1)
y <- seq(from = -1, to = 1, by = .1)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[j])
}
}
filled.contour(x, y, z)
Sigma <- matrix(c(1,4,0,0), nrow = 2, byrow = T)
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
x <- seq(from = -1, to = 1, by = .1)
y <- seq(from = -1, to = 1, by = .1)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[j])
}
}
filled.contour(x, y, z)
Sigma <- matrix(c(1,0,4,0), nrow = 2, byrow = T)
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
x <- seq(from = -1, to = 1, by = .1)
y <- seq(from = -1, to = 1, by = .1)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[j])
}
}
filled.contour(x, y, z)
Sigma <- matrix(c(1,0,
0,0),
nrow = 2, byrow = F)
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
x <- seq(from = -1, to = 1, by = .1)
y <- seq(from = -1, to = 1, by = .1)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[j])
}
}
filled.contour(x, y, z)
Sigma <- matrix(c(1,1,
1,0),
nrow = 2, byrow = F)
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
x <- seq(from = -1, to = 1, by = .1)
y <- seq(from = -1, to = 1, by = .1)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[j])
}
}
filled.contour(x, y, z)
Sigma <- matrix(c(2,4,
4,8),
nrow = 2, byrow = F)
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
x <- seq(from = -1, to = 1, by = .1)
y <- seq(from = -1, to = 1, by = .1)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[j])
}
}
filled.contour(x, y, z)
Sigma <- matrix(c(1,0,
0,0),
nrow = 2, byrow = F)
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
x <- seq(from = -1, to = 1, by = .1)
y <- seq(from = -1, to = 1, by = .1)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[j])
}
}
filled.contour(x, y, z)
Sigma <- matrix(c(1,0,
2,0),
nrow = 2, byrow = F)
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
x <- seq(from = -1, to = 1, by = .1)
y <- seq(from = -1, to = 1, by = .1)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[j])
}
}
filled.contour(x, y, z)
Sigma <- matrix(c(1,2,
2,4),
nrow = 2, byrow = F)
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
x <- seq(from = -1, to = 1, by = .1)
y <- seq(from = -1, to = 1, by = .1)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[j])
}
}
filled.contour(x, y, z)
a <- mean(c(1,2,3))
4**2
four
?glm
setwd("~/Documents/Projects/BikeShare/Rmd")
library(dplyr)
library(readr)
library(stringr)
library(knitr)
library(ggplot2)
source("../R/helpers.R")
full <- getProcessedTripData()
train <- full %>% filter(year == "2014" | (year == "2015" & month < "04"))
test <- full %>% filter(year == "2015" & month >= "04")
kable(head(train))
train.st <- filter(train, station_id == 4)
test.st <- filter(test, station_id == 4)
fit <- glm(arrivals ~ factor(weekday) + factor(hour) + factor(hour):factor(weekday), data = train.st, family = "poisson")
preds <- predict(fit, newdata = test.st, type = "response")
mean(abs(test.st$arrivals - preds)**2)
test.st$arrivals
max(test.st$arrivals)
preds
max(preds)
length(test.st$arrivals)
mean(test.st$arrivals**2)
train.st <- filter(train, station_id == 69)
test.st <- filter(test, station_id == 69)
fit <- glm(arrivals ~ factor(weekday) + factor(hour) + factor(hour):factor(weekday), data = train.st, family = "poisson")
preds <- predict(fit, newdata = test.st, type = "response")
mean(abs(test.st$arrivals - preds)**2)
sqrt(14)
mean(abs(test.st$arrivals)**2)
mean(abs(test.st$arrivals - rep(1, 3672))**2)
mean(abs(test.st$arrivals - rep(2, 3672))**2)
mean(abs(test.st$arrivals - rep(3, 3672))**2)
mean(abs(test.st$arrivals - rep(4, 3672))**2)
mean(abs(test.st$arrivals - rep(5, 3672))**2)
mean(abs(test.st$arrivals - rep(6, 3672))**2)
train <- full %>% filter(year == "2014" | (year == "2015" & month < "06"))
test <- full %>% filter(year == "2015" & month >= "06")
kable(head(train))
train.st <- filter(train, station_id == 69)
test.st <- filter(test, station_id == 69)
fit <- glm(arrivals ~ factor(weekday) + factor(hour) + factor(hour):factor(weekday), data = train.st, family = "poisson")
preds <- predict(fit, newdata = test.st, type = "response")
mean(abs(test.st$arrivals - preds)**2)
train <- full %>% filter(year == "2014" | (year == "2015" & month < "03"))
test <- full %>% filter(year == "2015" & month >= "03")
train.st <- filter(train, station_id == 69)
test.st <- filter(test, station_id == 69)
fit <- glm(arrivals ~ factor(weekday) + factor(hour) + factor(hour):factor(weekday), data = train.st, family = "poisson")
preds <- predict(fit, newdata = test.st, type = "response")
mean(abs(test.st$arrivals - preds)**2)
