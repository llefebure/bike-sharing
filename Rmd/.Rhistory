}
t/x
})]
plot(arr)
abline(h=10)
arr <- sapply(10900:11000, function(x){
xn <- x
t <- 0
while(xn > 0){
xn <- xn - 1 + sample(c(rep(0, 40), rep(1, 35), rep(2, 20), rep(3, 5)), 1)
t <- t+1
}
t/x
})]
plot(arr)
abline(h=10)
arr <- sapply(10900:11000, function(x){
xn <- x
t <- 0
while(xn > 0){
xn <- xn - 1 + sample(c(rep(0, 40), rep(1, 35), rep(2, 20), rep(3, 5)), 1)
t <- t+1
}
t/x
})
plot(arr)
abline(h=10)
A <- matrix(c(1,2,3,4), nrow = 2)
A
A %*% A
n <- A
for(i in 1:100){
n <- n %*% A
}
n
x = runif(100)
y = runif(100)
abs(sqrt(x) - sqrt(y)) < abs(x - y)
abs(sqrt(x) - sqrt(y)) <= abs(x - y)
x[33]
y[33]
sqrt(x[33]) - sqrt(y[33])
x - y
sqrt(x[33]) - sqrt(y[33])
x[33] - y[33]
plot(x, sqrt(x))
abs(sqrt(x) - sqrt(y))
abs(sqrt(x) - sqrt(y)) < abs(x-y)
x[65]
y[65]
abs(sqrt(x[65]) - sqrt(y[65]))
abs(x - y)
abs(sqrt(x[65]) - sqrt(y[65]))
abs(x[65] - y[65])
x
abs(x**1.1 - y**1.1 < abs(x-y)
abs(x**1.1 - y**1.1 < abs(x-y))
abs(x**1.1 - y**1.1) < abs(x-y)
library(gbm)
?gbm
?gbm
?filled.contour
example(filled.contour)
volcano
head(volcano)
Sigma <- matrix(c(1,0,0,0), nrow = 2)
Sigma
Sigma <- matrix(c(1,0,0,0), nrow = 2)
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
f(1,1)
f(1,2)
f(1,10)
f(1,1000)
f(x=1,y=1000)
combn(x, y)
?combn
z <- matrix(0, nrow = length(x))
z
head(z)
Sigma <- matrix(c(1,0,0,0), nrow = 2)
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
x <- seq(from = 0, to = 2, by = .01)
y <- seq(from = 0, to = 2, by = .01)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[i])
}
}
filled.contour(x, y, z)
Sigma <- matrix(c(1,0,0,0), nrow = 2)
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
x <- seq(from = 0, to = 5, by = .01)
y <- seq(from = 0, to = 5, by = .01)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[i])
}
}
filled.contour(x, y, z)
x <- seq(from = 0, to = 5, by = .01)
y <- seq(from = 0, to = 5, by = .01)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[i])
}
}
filled.contour(x, y, z)
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
x <- seq(from = -1, to = 1, by = .01)
y <- seq(from = -1, to = 1, by = .01)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[i])
}
}
filled.contour(x, y, z)
Sigma <- matrix(c(1,0,4,0), nrow = 2)
Sigma
Sigma <- matrix(c(1,4,0,0), nrow = 2)
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
x <- seq(from = -1, to = 1, by = .01)
y <- seq(from = -1, to = 1, by = .01)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[i])
}
}
filled.contour(x, y, z)
Sigma <- matrix(c(1,4,0,0), nrow = 2)
Sigma
Sigma <- matrix(c(1,0,4,0), nrow = 2)
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
x <- seq(from = -1, to = 1, by = .01)
y <- seq(from = -1, to = 1, by = .01)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[i])
}
}
filled.contour(x, y, z)
Sigma <- matrix(c(1,0,4,0), nrow = 2)
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
x <- seq(from = -1, to = 1, by = .1)
y <- seq(from = -1, to = 1, by = .1)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[i])
}
}
filled.contour(x, y, z)
Sigma <- matrix(c(1,4,0,0), nrow = 2)
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
x <- seq(from = -1, to = 1, by = .1)
y <- seq(from = -1, to = 1, by = .1)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[i])
}
}
filled.contour(x, y, z)
Sigma <- matrix(c(1,4,0,0), nrow = 2)
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
x <- seq(from = -1, to = 1, by = .1)
y <- seq(from = -1, to = 1, by = .1)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[i])
}
}
filled.contour(x, y, z)
Sigma <- matrix(c(1,4,0,0), nrow = 2)
Sigma
Sigma <- matrix(c(1,4,0,1), nrow = 2)
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
x <- seq(from = -1, to = 1, by = .1)
y <- seq(from = -1, to = 1, by = .1)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[i])
}
}
filled.contour(x, y, z)
Sigma <- matrix(c(1,4,2,1), nrow = 2)
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
x <- seq(from = -1, to = 1, by = .1)
y <- seq(from = -1, to = 1, by = .1)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[i])
}
}
filled.contour(x, y, z)
Sigma <- matrix(c(1,0,0,1), nrow = 2, byrow = T)
Sigma
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
x <- seq(from = -1, to = 1, by = .1)
y <- seq(from = -1, to = 1, by = .1)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[i])
}
}
filled.contour(x, y, z)
Sigma <- matrix(c(1,0,0,1), nrow = 2, byrow = T)
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
x <- seq(from = -1, to = 1, by = .1)
y <- seq(from = -1, to = 1, by = .1)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[j])
}
}
filled.contour(x, y, z)
Sigma <- matrix(c(1,4,0,0), nrow = 2, byrow = T)
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
x <- seq(from = -1, to = 1, by = .1)
y <- seq(from = -1, to = 1, by = .1)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[j])
}
}
filled.contour(x, y, z)
Sigma <- matrix(c(1,0,4,0), nrow = 2, byrow = T)
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
x <- seq(from = -1, to = 1, by = .1)
y <- seq(from = -1, to = 1, by = .1)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[j])
}
}
filled.contour(x, y, z)
Sigma <- matrix(c(1,0,
0,0),
nrow = 2, byrow = F)
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
x <- seq(from = -1, to = 1, by = .1)
y <- seq(from = -1, to = 1, by = .1)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[j])
}
}
filled.contour(x, y, z)
Sigma <- matrix(c(1,1,
1,0),
nrow = 2, byrow = F)
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
x <- seq(from = -1, to = 1, by = .1)
y <- seq(from = -1, to = 1, by = .1)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[j])
}
}
filled.contour(x, y, z)
Sigma <- matrix(c(2,4,
4,8),
nrow = 2, byrow = F)
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
x <- seq(from = -1, to = 1, by = .1)
y <- seq(from = -1, to = 1, by = .1)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[j])
}
}
filled.contour(x, y, z)
Sigma <- matrix(c(1,0,
0,0),
nrow = 2, byrow = F)
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
x <- seq(from = -1, to = 1, by = .1)
y <- seq(from = -1, to = 1, by = .1)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[j])
}
}
filled.contour(x, y, z)
Sigma <- matrix(c(1,0,
2,0),
nrow = 2, byrow = F)
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
x <- seq(from = -1, to = 1, by = .1)
y <- seq(from = -1, to = 1, by = .1)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[j])
}
}
filled.contour(x, y, z)
Sigma <- matrix(c(1,2,
2,4),
nrow = 2, byrow = F)
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
x <- seq(from = -1, to = 1, by = .1)
y <- seq(from = -1, to = 1, by = .1)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[j])
}
}
filled.contour(x, y, z)
a <- mean(c(1,2,3))
setwd("~/Documents/Projects/BikeShare/Rmd")
library(dplyr)
library(readr)
library(ggplot2)
library(scales)
source("../misc/helpers.R")
file_paths <- getFilePaths()
status_data <- read_csv(file_paths$status[3])
status_data <- status_data %>%
mutate(month = format(time, "%m"),
day = format(time, "%a"),
hour = format(time, "%H"),
minute = format(time, "%M"),
weekday = ifelse(format(time, "%u") < 6, "1", "0"),
hm = as.POSIXct(format(time, "%H:%M"), tz = "", format = "%H:%M"))
```
status_data
two <- filter(status_data, station_id == 2)
two
two$time
two$time[1]
as.Date(two$time[1])
as.Date(two$time)
unique(as.Date(two$time))
dts <- unique(as.Date(two$time))
dts[1]
dts[length(dts)]
dts[length(dts)] - dts[1]
two
condensed <- status_data %>%
group_by(station_id) %>%
mutate(row_num = row_number())
condensed
condensed %>% select(station_id, hour, row_num)
condensed %>% filter(station_id == 2) %>% select(station_id, hour, row_num)
condensed %>% filter(station_id == 4) %>% select(station_id, hour, row_num)
condensed <- status_data %>%
group_by(station_id) %>%
mutate(row_num = row_number(), row_num_offset = row_number() - 1) %>%
ungroup()
condensed %>% select(station_id, row_num, row_num_offset)
?inner_join
condensed <- inner_join(condensed, condensed, by = c("station_id", "row_num" = "row_num_offset"))
condensed
condensed %>% select(time.x, time.y)
file_paths <- getFilePaths()
trip_data <- read_csv(file_paths$trip[3])
nrow(trip_data)
trip_data <- trip_data %>%
mutate(month = format(time, "%m"),
day = format(time, "%a"),
hour = format(time, "%H"),
minute = format(time, "%M"),
weekday = ifelse(format(time, "%u") < 6, "1", "0"),
hm = as.POSIXct(format(time, "%H:%M"), tz = "", format = "%H:%M"))
trip
trip_data
trip_data <- trip_data %>%
mutate(time = as.POSIXct(`Start Date`, format = "%m/%d/%Y %H:%M"),
month = format(time, "%m"),
day = format(time, "%a"),
hour = format(time, "%H"))
trip_data
departures <- trip_data %>%
group_by(`Start Terminal`, year, month, day, hour) %>%
summarize(departures = n())
trip_data <- trip_data %>%
mutate(time = as.POSIXct(`Start Date`, format = "%m/%d/%Y %H:%M"),
year = format(time, "%Y"),
month = format(time, "%m"),
day = format(time, "%a"),
hour = format(time, "%H"))
arrivals <- trip_data %>%
group_by(`End Terminal`, year, month, day, hour) %>%
summarize(departures = n())
departures
arrivals
departures <- trip_data %>%
group_by(`Start Terminal`, year, month, day, hour) %>%
summarize(departures = n())
depar
departures
trip_data
trip_data
min(trip_data$`Start Date`)
max(trip_data$`Start Date`)
trip_data
trip_data
trip_data %>% arrange(paste(year, month, day))
?as.Date
trip_data %>% arrange(time)
trip_data <- trip_data %>%
mutate(time = as.POSIXct(`Start Date`, format = "%m/%d/%Y %H:%M"),
year = format(time, "%Y"),
month = format(time, "%m"),
day = format(time, "%a"),
hour = format(time, "%H"),
weekday = ifelse(format(time, "%u") < 6, "1", "0"))
departures <- trip_data %>%
group_by(`Start Terminal`, year, month, day, hour, weekday) %>%
summarize(departures = n())
arrivals <- trip_data %>%
group_by(`End Terminal`, year, month, day, hour, weekday) %>%
summarize(departures = n())
arrivals
mutate(time = as.POSIXct(`Start Date`, format = "%m/%d/%Y %H:%M"),
year = format(time, "%Y"),
trip_data <- trip_data %>%
mutate(time = as.POSIXct(`Start Date`, format = "%m/%d/%Y %H:%M"),
;'adsf'
trip_data <- trip_data %>%
mutate(time = as.POSIXct(`Start Date`, format = "%m/%d/%Y %H:%M"),
year = format(time, "%Y"),
month = format(time, "%m"),
day = format(time, "%a"),
hour = format(time, "%H"),
weekday = ifelse(format(time, "%u") < 6, "Weekday", "Weekend"))
departures <- trip_data %>%
group_by(`Start Terminal`, year, month, day, hour, weekday) %>%
summarize(departures = n())
arrivals <- trip_data %>%
group_by(`End Terminal`, year, month, day, hour, weekday) %>%
summarize(departures = n())
arrivals
?rename
?full_outer_join
?inner_join
colnames(departures)[1] <- "station_id"
colnames(arrivals)[1] <- "station_id"
training_set <- full_join(arrivals, departures)
departures <- trip_data %>%
group_by(`Start Terminal`, year, month, day, hour, weekday) %>%
summarize(departures = n())
arrivals <- trip_data %>%
group_by(`End Terminal`, year, month, day, hour, weekday) %>%
summarize(arrivals = n())
colnames(departures)[1] <- "station_id"
colnames(arrivals)[1] <- "station_id"
training_set <- full_join(arrivals, departures)
training_set
training_set[1,1]
training_set[is.na(training_set)] = 0
training_set
