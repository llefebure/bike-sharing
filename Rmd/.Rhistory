to = as.Date("2015-08-31"),
by = 1))) %>%
mutate(year = format(date, "%Y"),
month = format(date, "%m"),
day = format(date, "%d"),
dow = format(date, "%a"),
weekday = ifelse(format(date, "%u") < 6, "Weekday", "Weekend"),
join_key = "") %>%
full_join(data.frame(station_id = unique(processed$station_id), join_key = "")) %>%
full_join(data.frame(hour = str_pad(as.character(0:23), width = 2, side = "left", pad = "0"),
join_key = "")) %>%
select(station_id, year, month, day, dow, hour, weekday)
# join date grid with processed df
processed <- left_join(date_range, processed)
# outer joins fill with NA's, so we need to convert these to 0's
processed[is.na(processed)] = 0
# add column for net change
processed <- mutate(processed, net = arrivals - departures)
# add zips to join with weather data
processed <- inner_join(processed, station_data)
# add derived date fields to weather data
weather_data <- weather_data %>%
mutate(time = as.POSIXct(PDT, format = "%m/%d/%Y"),
year = format(time, "%Y"),
month = format(time, "%m"),
day = format(time, "%d")) %>%
select(year, month, day, Zip, `Mean TemperatureF`)
# append weather info
processed <- inner_join(processed, weather_data)
# change to factors
processed$weekday <- factor(processed$weekday)
processed$hour <- factor(processed$hour)
# add status data
processed <- full_join(processed, status_data)
return(processed)
}
full <- getProcessedTripData()
full <- getProcessedTripData(fn = NULL)
full
?saveRDS
saveRDS(full, "../data/processed_trips.Rds")
setwd("~/Documents/Projects/BikeShare/Rmd")
saveRDS(full, "../data/processed_trips.Rds")
?glm
?cv.glm
library(boot)
?cv.glm
?glm
?glmnet
library(nnet)
?glmnet
library(glmnet)
?glmnet
full <- getProcessedTripData()
full
full <- getProcessedTripData() %>%
filter(!is.na(bikes_available))
full
full$bikes_available
sum(is.na(full$bikes_available)
)
sum(is.na(full$docks_available))
train <- full %>% filter(year == "2014" | (year == "2015" & month < "03"))
test <- full %>% filter(year == "2015" & month >= "06")
train
kable(head(train))
train
train
full <- getProcessedTripData(fn = NULL) %>%
filter(!is.na(bikes_available))
full
saveRDS(full, "../data/processed_trips.Rds")
full
arr.fit <- glm(arrivals ~ weekday + hour + weekday:hour + `Mean TemperatureF` + bikes_available,
data = train.st, family = "poisson")
train.st <- filter(train, station_id == 69)
arr.fit <- glm(arrivals ~ weekday + hour + weekday:hour + `Mean TemperatureF` + bikes_available,
data = train.st, family = "poisson")
train <- full %>% filter(year == "2014" | (year == "2015" & month < "03"))
test <- full %>% filter(year == "2015" & month >= "03")
ARR_FORM <- arrivals ~ weekday + hour + weekday:hour + `Mean TemperatureF` + bikes_available
DEP_FORM <- departures ~ weekday + hour + weekday:hour + `Mean TemperatureF` + bikes_available
NET_FORM <- net ~ weekday + hour + weekday:hour + `Mean TemperatureF` + bikes_available
evaluate <- function(obs, preds) {
mse <- mean(abs(obs - preds)**2)
mae <- mean(abs(obs - preds))
list(mse = mse,
mae = mae)
}
fitOLS <- function(train, test) {
fit <- glm(NET_FORM, data = train)
preds <- predict(fit, newdata = test)
train_eval <- evaluate(train$net, predict(fit))
test_eval <- evaluate(test$net, preds)
return(list(train = train_eval, test = test_eval))
}
# random forest for net change directly
fitRF <- function(train, test) {
fit <- randomForest(NET_FORM, data = train.st)
preds <- predict(fit, newdata = test)
train_eval <- evaluate(train$net, predict(fit))
test_eval <- evaluate(test$net, preds)
return(list(train = train_eval, test = test_eval))
}
# poisson regression models for arrivals and departures
fitPoisson <- function(train, test) {
arr_fit <- glm(ARR_FORM, data = train, family = "poisson")
dep_fit <- glm(DEP_FORM, data = train, family = "poisson")
arr_preds <- predict(arr_fit, newdata = test, type = "response")
dep_preds <- predict(dep_fit, newdata = test, type = "response")
net_preds <- arr_preds - dep_preds
train_eval <- evaluate(train$net, predict(arr_fit, type = "response") - predict(dep_fit, type = "response"))
test_eval <- evaluate(test$net, net_preds)
return(list(train = train_eval, test = test_eval))
}
train.st <- filter(train, station_id == 58)
test.st <- filter(test, station_id == 58)
fitOLS(train.st, test.st)
fitRF(train.st, test.st)
fitPoisson(train.st, test.st)
fitPoisson = function(st) {
train.st <- filter(train, station_id == st)
test.st <- filter(test, station_id == st)
arr.fit <- glm(arrivals ~ weekday + hour + weekday:hour + `Mean TemperatureF` + bikes_available,
data = train.st, family = "poisson")
dep.fit <- glm(arrivals ~ weekday + hour + weekday:hour + `Mean TemperatureF` + bikes_available,
data = train.st, family = "poisson")
list(arr.fit = arr.fit,
dep.fit = dep.fit)
}
model.fits <- fitPoisson(69) # station_id 69 is SF Caltrain
fitPoisson = function(st) {
train.st <- filter(train, station_id == st)
test.st <- filter(test, station_id == st)
arr.fit <- glm(arrivals ~ weekday + hour + weekday:hour + `Mean TemperatureF` + bikes_available,
data = train.st, family = "poisson")
dep.fit <- glm(arrivals ~ weekday + hour + weekday:hour + `Mean TemperatureF` + bikes_available,
data = train.st, family = "poisson")
list(arr.fit = arr.fit,
dep.fit = dep.fit,
arr.test.preds = predict(arr.fit, newdata = test.st, type = "response"),
dep.test.preds = predict(dep.fit, newdata = test.st, type = "response"))
}
test.st <- mutate(test.st, arr.param = pois.fit$arr.preds,
fitPoisson = function(st) {
train.st <- filter(train, station_id == st)
test.st <- filter(test, station_id == st)
arr.fit <- glm(arrivals ~ weekday + hour + weekday:hour + `Mean TemperatureF` + bikes_available,
data = train.st, family = "poisson")
dep.fit <- glm(arrivals ~ weekday + hour + weekday:hour + `Mean TemperatureF` + bikes_available,
data = train.st, family = "poisson")
list(arr.fit = arr.fit,
dep.fit = dep.fit,
test = test.st)
}
}
fitPoisson = function(st) {
train.st <- filter(train, station_id == st)
test.st <- filter(test, station_id == st)
arr.fit <- glm(arrivals ~ weekday + hour + weekday:hour + `Mean TemperatureF` + bikes_available,
data = train.st, family = "poisson")
dep.fit <- glm(arrivals ~ weekday + hour + weekday:hour + `Mean TemperatureF` + bikes_available,
data = train.st, family = "poisson")
list(arr.fit = arr.fit,
dep.fit = dep.fit,
test = test.st)
}
pois.fit <- fitPoisson(69) # station_id 69 is SF Caltrain
dist.pred <- mutate(test.st, arr.param = predict(pois.fit$arr.fit, newdata = pois.fit$test,
type = "response"),
dep.param = predict(pois.fit$dep.fit, newdata = pois.fit$test,
type = "response"),
q.25 = qskellam(.25, arr.param, dep.param),
q.50 = qskellam(.50, arr.param, dep.param),
q.75 = qskellam(.75, arr.param, dep.param))
pois.fit <- fitPoisson(69) # station_id 69 is SF Caltrain
dist.pred <- mutate(test.st, arr.param = predict(pois.fit$arr.fit, newdata = pois.fit$test,
type = "response"),
dep.param = predict(pois.fit$dep.fit, newdata = pois.fit$test,
type = "response"),
q.25 = qskellam(.25, arr.param, dep.param),
q.50 = qskellam(.50, arr.param, dep.param),
q.75 = qskellam(.75, arr.param, dep.param))
kable(head(test.st %>% select(hour, weekday, q.25, q.50, q.75), 15))
pois.fit
dist.pred
kable(head(dist.pred %>% select(hour, weekday, q.25, q.50, q.75), 15))
head(pois.fit$test)
dist.pred <- mutate(pois.fit$test,
arr.param = predict(pois.fit$arr.fit, newdata = pois.fit$test,
type = "response"),
dep.param = predict(pois.fit$dep.fit, newdata = pois.fit$test,
type = "response"),
q.25 = qskellam(.25, arr.param, dep.param),
q.50 = qskellam(.50, arr.param, dep.param),
q.75 = qskellam(.75, arr.param, dep.param))
```
dist.pred
kable(head(dist.pred %>% select(hour, weekday, q.25, q.50, q.75), 15))
test
filter(test, station_id == 69)
st=69
train.st <- filter(train, station_id == st)
test.st <- filter(test, station_id == st)
arr.fit <- glm(arrivals ~ weekday + hour + weekday:hour + `Mean TemperatureF` + bikes_available,
data = train.st, family = "poisson")
dep.fit <- glm(arrivals ~ weekday + hour + weekday:hour + `Mean TemperatureF` + bikes_available,
data = train.st, family = "poisson")
train.st
test.st
pois.fit <- fitPoisson(69) # station_id 69 is SF Caltrain
fitPoisson = function(st) {
train.st <- filter(train, station_id == st)
test.st <- filter(test, station_id == st)
arr.fit <- glm(arrivals ~ weekday + hour + weekday:hour + `Mean TemperatureF` + bikes_available,
data = train.st, family = "poisson")
dep.fit <- glm(arrivals ~ weekday + hour + weekday:hour + `Mean TemperatureF` + bikes_available,
data = train.st, family = "poisson")
list(arr.fit = arr.fit,
dep.fit = dep.fit,
test = test.st)
}
pois.fit <- fitPoisson(69) # station_id 69 is SF Caltrain
dist.pred <- mutate(pois.fit$test,
arr.param = predict(pois.fit$arr.fit, newdata = pois.fit$test,
type = "response"),
dep.param = predict(pois.fit$dep.fit, newdata = pois.fit$test,
type = "response"),
q.25 = qskellam(.25, arr.param, dep.param),
q.50 = qskellam(.50, arr.param, dep.param),
q.75 = qskellam(.75, arr.param, dep.param))
dist.pred
kable(head(dist.pred %>% select(hour, weekday, q.25, q.50, q.75), 15))
kable(head(dist.pred %>% filter(weekday == "Weekday") %>% select(hour, weekday, q.25, q.50, q.75), 15))
dist.pred
filter(dist.pred, weekday == "Weekday")
filter(dist.pred, weekday == "Weekday")[10:20]
filter(dist.pred, weekday == "Weekday")[10:20,]
filter(dist.pred, weekday == "Weekday", hour == "08")
hist(filter(dist.pred, weekday == "Weekday", hour == "08") %>% select(net))
hist(filter(dist.pred, weekday == "Weekday", hour == "08") %>% select(as.numeric(net)))
hist(filter(dist.pred, weekday == "Weekday", hour == "08") %>% select(net))
filter(dist.pred, weekday == "Weekday", hour == "08") %>% select(net)
hist(filter(dist.pred, weekday == "Weekday", hour == "08") %>% select(net)[,1])
hist(filter(dist.pred, weekday == "Weekday", hour == "08") %>% select(net)[,1])
filter(dist.pred, weekday == "Weekday", hour == "08") %>% select(net)
a=filter(dist.pred, weekday == "Weekday", hour == "08") %>% select(net)
a$net
hist(a$net)
a=filter(dist.pred, weekday == "Weekday", hour == "08") %>% select(q.50)
a
a$q.50
fitPoisson = function(st) {
train.st <- filter(train, station_id == st)
test.st <- filter(test, station_id == st)
arr.fit <- glm(arrivals ~ weekday + hour + weekday:hour + `Mean TemperatureF` + bikes_available,
data = train.st, family = "poisson")
dep.fit <- glm(departures ~ weekday + hour + weekday:hour + `Mean TemperatureF` + bikes_available,
data = train.st, family = "poisson")
list(arr.fit = arr.fit,
dep.fit = dep.fit,
test = test.st)
}
pois.fit <- fitPoisson(69) # station_id 69 is SF Caltrain
dist.pred <- mutate(pois.fit$test,
arr.param = predict(pois.fit$arr.fit, newdata = pois.fit$test,
type = "response"),
dep.param = predict(pois.fit$dep.fit, newdata = pois.fit$test,
type = "response"),
q.25 = qskellam(.25, arr.param, dep.param),
q.50 = qskellam(.50, arr.param, dep.param),
q.75 = qskellam(.75, arr.param, dep.param))
```
kable(head(dist.pred %>% filter(weekday == "Weekday") %>% select(hour, weekday, q.25, q.50, q.75), 15))
mean(dist.pred$net > dist.pred$q.25 & dist.pred$net < dist.pred$q.75)
plot(dist.pred$net, dist.pred$q.50)
mean(dist.pred$net >= dist.pred$q.25 & dist.pred$net <= dist.pred$q.75)
mean(dist.pred$net >= dist.pred$q.25 & dist.pred$net <= dist.pred$q.75)
dist.pred %>%filter(hour == "08")
adist.pred %>%filter(hour == "08")
a=dist.pred %>%filter(hour == "08")
dist.pred =a
mean(dist.pred$net >= dist.pred$q.25 & dist.pred$net <= dist.pred$q.75)
pois.fit <- fitPoisson(69) # station_id 69 is SF Caltrain
dist.pred <- mutate(pois.fit$test,
arr.param = predict(pois.fit$arr.fit, newdata = pois.fit$test,
type = "response"),
dep.param = predict(pois.fit$dep.fit, newdata = pois.fit$test,
type = "response"),
q.25 = qskellam(.25, arr.param, dep.param),
q.50 = qskellam(.50, arr.param, dep.param),
q.75 = qskellam(.75, arr.param, dep.param))
kable(head(dist.pred %>% filter(weekday == "Weekday") %>% select(hour, weekday, q.25, q.50, q.75), 15))
mean(dist.pred$net >= dist.pred$q.25 & dist.pred$net <= dist.pred$q.75)
kable(head(dist.pred %>% filter(weekday == "Weekday") %>% select(hour, weekday, net, q.25, q.50, q.75), 15))
mean(dist.pred$net >= dist.pred$q.25 & dist.pred$net <= dist.pred$q.75)
dist.pred %>%filter(hour == "08" | hour == "09")
dist.pred =dist.pred %>%filter(hour == "08" | hour == "09")
mean(dist.pred$net >= dist.pred$q.25 & dist.pred$net <= dist.pred$q.75)
dist.pred =dist.pred %>%filter(hour == "08")
dist.pred
mean(dist.pred$net)
median(dist.pred$net)
hist(dist.pred$net)
rpois(10, 1)
rpois(10000, 13)
train <- full %>% filter(year == "2014" | (year == "2015" & month < "03"))
test <- full %>% filter(year == "2015" & month >= "06")
kable(head(train %>% filter (weekday == "Weekend")))
kable(head(train %>% filter (weekday == "Weekday")))
kable(head(test %>% filter (weekday == "Weekday")))
kable(head(test %>% filter (weekday == "Weekend")))
train.st <- filter(train, station_id == st)
test.st <- filter(test, station_id == st)
train.st
y = train.st$arrivals
train
train %>% group_by(station_id, weekday, hour) %>% summarize(group_avg = mean(net))
group.avgs <- train %>% group_by(station_id, weekday, hour) %>% summarize(group_avg = mean(net))
group.avgs
test.st
group_avgs
group.avgs
test.g <- test.st %>% full_join(group.avgs)
test.g
mean((test.g$group_avg - test.g$net)**2)
test.g$group_avg
sum(is.na(test.g$group_avg))
mean((test.g$group_avg - test.g$net)**2)
test.g$net
test.g
test.g$net
test.g
test.g$net
test.g$net[1:10]
test.st
test.st$net
test.g <- full_join(test.st, group.avgs)
test.g
mean((test.g$group_avg - test.g$net)**2)
group.avgs
test.st
test.g <- inner_join(test.st, group.avgs)
test.g
test.g$net
mean((test.g$group_avg - test.g$net)**2)
test.st
mod <- fitPoisson(69)
mod
names(mod)
test.g <- inner_join(mod$test, group.avgs)
test.g
mean((test.g$net - test.g$group_avg)**2)
preds <- predict(mod$arr.fit, newdata = mod$test, type = "response") - predict(mod$dep.fit, newdata = mod$test, type = "response")
mean((mod$test$net - preds)**2)
mod <- fitPoisson(58)
group.avgs <- train %>% group_by(station_id, weekday, hour) %>% summarize(group_avg = mean(net))
test.group.avg <- inner_join(mod$test, group.avgs)
mean((test.group.avg$net - test.group.avg$group_avg)**2)
preds <- predict(mod$arr.fit, newdata = mod$test, type = "response") - predict(mod$dep.fit, newdata = mod$test, type = "response")
mean((mod$test$net - preds)**2)
mod <- fitPoisson(2)
group.avgs <- train %>% group_by(station_id, weekday, hour) %>% summarize(group_avg = mean(net))
test.group.avg <- inner_join(mod$test, group.avgs)
mean((test.group.avg$net - test.group.avg$group_avg)**2)
preds <- predict(mod$arr.fit, newdata = mod$test, type = "response") - predict(mod$dep.fit, newdata = mod$test, type = "response")
mean((mod$test$net - preds)**2)
mod <- fitPoisson(24)
group.avgs <- train %>% group_by(station_id, weekday, hour) %>% summarize(group_avg = mean(net))
test.group.avg <- inner_join(mod$test, group.avgs)
mean((test.group.avg$net - test.group.avg$group_avg)**2)
preds <- predict(mod$arr.fit, newdata = mod$test, type = "response") - predict(mod$dep.fit, newdata = mod$test, type = "response")
mean((mod$test$net - preds)**2)
```
mod <- fitPoisson(68)
group.avgs <- train %>% group_by(station_id, weekday, hour) %>% summarize(group_avg = mean(net))
test.group.avg <- inner_join(mod$test, group.avgs)
mean((test.group.avg$net - test.group.avg$group_avg)**2)
preds <- predict(mod$arr.fit, newdata = mod$test, type = "response") - predict(mod$dep.fit, newdata = mod$test, type = "response")
mean((mod$test$net - preds)**2)
mod <- fitPoisson(65)
group.avgs <- train %>% group_by(station_id, weekday, hour) %>% summarize(group_avg = mean(net))
test.group.avg <- inner_join(mod$test, group.avgs)
mean((test.group.avg$net - test.group.avg$group_avg)**2)
preds <- predict(mod$arr.fit, newdata = mod$test, type = "response") - predict(mod$dep.fit, newdata = mod$test, type = "response")
mean((mod$test$net - preds)**2)
full$station_id
sapply(unique(full$station_id), function(st) {
mod <- fitPoisson(65)
group.avgs <- train %>% group_by(station_id, weekday, hour) %>% summarize(group_avg = mean(net))
test.group.avg <- inner_join(mod$test, group.avgs)
mse.avg <- mean((test.group.avg$net - test.group.avg$group_avg)**2)
preds <- predict(mod$arr.fit, newdata = mod$test, type = "response") - predict(mod$dep.fit, newdata = mod$test, type = "response")
mse.pois <- mean((mod$test$net - preds)**2)
c(mse.avg, mse.pois)
})
mse.comp <- t(sapply(unique(full$station_id), function(st) {
mod <- fitPoisson(65)
group.avgs <- train %>% group_by(station_id, weekday, hour) %>% summarize(group_avg = mean(net))
test.group.avg <- inner_join(mod$test, group.avgs)
mse.avg <- mean((test.group.avg$net - test.group.avg$group_avg)**2)
preds <- predict(mod$arr.fit, newdata = mod$test, type = "response") - predict(mod$dep.fit, newdata = mod$test, type = "response")
mse.pois <- mean((mod$test$net - preds)**2)
c(mse.avg, mse.pois)
}))
mse.comp
mse.comp <- t(sapply(unique(full$station_id), function(st) {
mod <- fitPoisson(st)
group.avgs <- train %>% group_by(station_id, weekday, hour) %>% summarize(group_avg = mean(net))
test.group.avg <- inner_join(mod$test, group.avgs)
mse.avg <- mean((test.group.avg$net - test.group.avg$group_avg)**2)
preds <- predict(mod$arr.fit, newdata = mod$test, type = "response") - predict(mod$dep.fit, newdata = mod$test, type = "response")
mse.pois <- mean((mod$test$net - preds)**2)
c(mse.avg, mse.pois)
}))
plot(mse.comp[,1], mse.comp[,2])
abline(a = 0, b = 1)
plot(mse.comp[,1], mse.comp[,2], xlim = c(0, 5))
plot(mse.comp[,1], mse.comp[,2], xlim = c(0, 5), ylim = c(0,5))
abline(a = 0, b = 1)
mean(mse.comp[,1] > mse.comp[,2])
mse.comp[,1] > mse.comp[,2]
plot(mse.comp[,1], mse.comp[,2])
abline(a = 0, b = 1)
mse.comp[,1]
mse.comp[,1] > mse.comp[,2]
mean(mse.comp[,1] > mse.comp[,2])
mse.comp[,2]
mean(mse.comp[,1] > mse.comp[,2], na.rm = T)
mean(mse.comp[,1] >= mse.comp[,2], na.rm = T)
mean(mse.comp[,1] > mse.comp[,2], na.rm = T)
plot(mse.comp[,1], mse.comp[,2])
abline(a = 0, b = 1)
mse.comp
data.frame(mse.comp)
mse.comp <- data.frame(mse.comp)
mse.comp <- data.frame(mse.comp)
mse.comp$col <- ifelse(mse.comp$X1 > mse.comp$X2, "Good", "Bad")
plot(mse.comp[,1], mse.comp[,2], color)
plot(mse.comp[,1], mse.comp[,2], color = col)
plot(mse.comp[,1], mse.comp[,2], col = col)
?plot
plot(mse.comp[,1], mse.comp[,2], colors = col)
plot(mse.comp[,1], mse.comp[,2], colors = mse.comp$col)
plot(mse.comp[,1], mse.comp[,2], color = mse.comp$col)
plot(mse.comp[,1], mse.comp[,2], col = mse.comp$col)
qplot(mse.comp[,1], mse.comp[,2], col = mse.comp$col)
qplot(mse.comp[,1], mse.comp[,2], color = mse.comp$col)
mean(mse.comp$col)
mean(mse.comp$col == "Good")
mean(mse.comp$col == "Good", na.rm = T)
mean(mse.comp$col[mse.comp$X1 > 2] == "Good", na.rm = T)
full <- getProcessedTripData() %>%
filter(!is.na(bikes_available))
train <- full %>% filter(year == "2014" | (year == "2015" & month < "06"))
test <- full %>% filter(year == "2015" & month >= "06")
kable(head(test %>% filter (weekday == "Weekend")))
mse.comp <- t(sapply(unique(full$station_id), function(st) {
mod <- fitPoisson(st)
group.avgs <- train %>% group_by(station_id, weekday, hour) %>% summarize(group_avg = mean(net))
test.group.avg <- inner_join(mod$test, group.avgs)
mse.avg <- mean((test.group.avg$net - test.group.avg$group_avg)**2)
preds <- predict(mod$arr.fit, newdata = mod$test, type = "response") - predict(mod$dep.fit, newdata = mod$test, type = "response")
mse.pois <- mean((mod$test$net - preds)**2)
c(mse.avg, mse.pois)
}))
mse.comp <- data.frame(mse.comp)
mse.comp$col <- ifelse(mse.comp$X1 > mse.comp$X2, "Good", "Bad")
qplot(mse.comp[,1], mse.comp[,2], color = mse.comp$col)
abline(a = 0, b = 1)
mean(mse.comp$col[mse.comp$X1 > 2] == "Good", na.rm = T)
mean(mse.comp$col == "Good", na.rm = T)
fitPoisson <- function(st) {
train.st <- filter(train, station_id == st)
test.st <- filter(test, station_id == st)
arr.fit <- glm(arrivals ~ weekday + hour + weekday:hour + `Mean TemperatureF` + bikes_available + day,
data = train.st, family = "poisson")
dep.fit <- glm(departures ~ weekday + hour + weekday:hour + `Mean TemperatureF` + bikes_available + day,
data = train.st, family = "poisson")
list(arr.fit = arr.fit,
dep.fit = dep.fit,
test = test.st)
}
mse.comp <- t(sapply(unique(full$station_id), function(st) {
mod <- fitPoisson(st)
group.avgs <- train %>% group_by(station_id, weekday, hour) %>% summarize(group_avg = mean(net))
test.group.avg <- inner_join(mod$test, group.avgs)
mse.avg <- mean((test.group.avg$net - test.group.avg$group_avg)**2)
preds <- predict(mod$arr.fit, newdata = mod$test, type = "response") - predict(mod$dep.fit, newdata = mod$test, type = "response")
mse.pois <- mean((mod$test$net - preds)**2)
c(mse.avg, mse.pois)
}))
mse.comp <- data.frame(mse.comp)
mse.comp$col <- ifelse(mse.comp$X1 > mse.comp$X2, "Good", "Bad")
qplot(mse.comp[,1], mse.comp[,2], color = mse.comp$col)
mean(mse.comp$col[mse.comp$X1 > 2] == "Good", na.rm = T)
15/18
?qplot
dist.pred
qplot(net, q.50, data = dist.pred)
dist.pred
nrow(dist.pred)
dist.pred <- mutate(pois.fit$test,
arr.param = predict(pois.fit$arr.fit, newdata = pois.fit$test,
type = "response"),
dep.param = predict(pois.fit$dep.fit, newdata = pois.fit$test,
type = "response"),
q.25 = qskellam(.25, arr.param, dep.param),
q.50 = qskellam(.50, arr.param, dep.param),
q.75 = qskellam(.75, arr.param, dep.param))
kable(head(dist.pred %>% filter(weekday == "Weekday") %>% select(hour, weekday, net, q.25, q.50, q.75), 15))
qplot(net, q.50, data = dist.pred)
