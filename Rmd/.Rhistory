fit <- glm(NET_FORM, data = train)
preds <- predict(fit, newdata = test)
train_eval <- evaluate(train$net, predict(fit))
test_eval <- evaluate(test$net, preds)
return(preds)
return(list(train = train_eval, test = test_eval))
}
fitPoisson <- function(train, test) {
arr_fit <- glm(ARR_FORM, data = train, family = "poisson")
dep_fit <- glm(DEP_FORM, data = train, family = "poisson")
arr_preds <- predict(arr_fit, newdata = test, type = "response")
dep_preds <- predict(dep_fit, newdata = test, type = "response")
net_preds <- arr_preds - dep_preds
train_eval <- evaluate(train$net, predict(arr_fit, type = "response") - predict(dep_fit, type = "response"))
test_eval <- evaluate(test$net, net_preds)
return(net_preds)
return(list(train = train_eval, test = test_eval))
}
fitOLS(train.st, test.st)
a<-fitOLS(train.st, test.st)
b<-fitPoisson(train.st, test.st)
a==b
a
b
a
b
a - b
fitPoisson <- function(train, test) {
arr_fit <- glm(ARR_FORM, data = train)#, family = "poisson")
dep_fit <- glm(DEP_FORM, data = train)#, family = "poisson")
arr_preds <- predict(arr_fit, newdata = test, type = "response")
dep_preds <- predict(dep_fit, newdata = test, type = "response")
net_preds <- arr_preds - dep_preds
train_eval <- evaluate(train$net, predict(arr_fit, type = "response") - predict(dep_fit, type = "response"))
test_eval <- evaluate(test$net, net_preds)
return(list(train = train_eval, test = test_eval))
}
fitPoisson(train.st, test.st)
fitOLS(train.st, test.st)
fitOLS <- function(train, test) {
fit <- glm(NET_FORM, data = train)
preds <- predict(fit, newdata = test)
train_eval <- evaluate(train$net, predict(fit))
test_eval <- evaluate(test$net, preds)
return(list(train = train_eval, test = test_eval))
}
fitOLS(train.st, test.st)
fitPoisson(train.st, test.st)
fitOLS <- function(train, test) {
fit <- glm(NET_FORM, data = train, family = "poisson")
preds <- predict(fit, newdata = test, type = "response")
train_eval <- evaluate(train$net, predict(fit, type = "response"))
test_eval <- evaluate(test$net, preds)
return(list(train = train_eval, test = test_eval))
}
fitOLS(train.st, test.st)
x = rnorm(1000)
y = sapply(rpois, x)
?sapply
y = sapply(x, function(a) rpois(1, a))
?rpois
warnings
warnings()
x = abs(rnorm(1000))
y = sapply(x, function(a) rpois(1, a))
plot(x, y)
ARR_FORM <- arrivals ~ weekday + hour
DEP_FORM <- departures ~ weekday + hour
NET_FORM <- net ~ weekday + hour
fitOLS <- function(train, test) {
fit <- glm(NET_FORM, data = train)
preds <- predict(fit, newdata = test)
train_eval <- evaluate(train$net, predict(fit))
test_eval <- evaluate(test$net, preds)
return(list(train = train_eval, test = test_eval))
}
# random forest for net change directly
fitRF <- function(train, test) {
fit <- randomForest(NET_FORM, data = train.st)
preds <- predict(fit, newdata = test)
train_eval <- evaluate(train$net, predict(fit))
test_eval <- evaluate(test$net, preds)
return(list(train = train_eval, test = test_eval))
}
# poisson regression models for arrivals and departures
fitPoisson <- function(train, test) {
arr_fit <- glm(ARR_FORM, data = train, family = "poisson")
dep_fit <- glm(DEP_FORM, data = train, family = "poisson")
arr_preds <- predict(arr_fit, newdata = test, type = "response")
dep_preds <- predict(dep_fit, newdata = test, type = "response")
net_preds <- arr_preds - dep_preds
train_eval <- evaluate(train$net, predict(arr_fit, type = "response") - predict(dep_fit, type = "response"))
test_eval <- evaluate(test$net, net_preds)
return(list(train = train_eval, test = test_eval))
}
train.st <- filter(train, station_id == 69)
test.st <- filter(test, station_id == 69)
fitOLS(train.st, test.st)
fitRF(train.st, test.st)
fitPoisson(train.st, test.st)
arr_fit <- glm(arrivals ~ weekday + hour, data = train.st, family = "poisson")
dep_fit <- glm(departures ~ weekday + hour, data = train.st, family = "poisson")
preds <- data.frame(arr = predict(arr_fit, newdata = test.st, type = "response"),
dep = predict(dep_fit, newdata = test.st, type = "response"))
preds
library(skellam)
install.packages("skellam")
library(skellam)
skellam
?skellam
obs <- test.st$net
preds
head(preds)
plot(arr)
plot(arr, data = preds)
plot(preds$arr)
preds <- data.frame(arr = predict(arr_fit, newdata = test.st, type = "response"),
dep = predict(dep_fit, newdata = test.st, type = "response"),
weekday = test.st$weekday,
hour = test.st$hour)
test.st
test.st <- mutate(test.st, arr = predict(arr_fit, newdata = test.st, type = "response"),
dep = predict(dep_fit, newdata = test.st, type = "response"))
obs <- test.st$net
test.st
?dskellam
pskellam(c(.25, .5, .75), 1, 2)
pskellam(c(.25, .5, .75), .021, 5)
dskellam(c(.25, .5, .75), .021, 5)
dskellam(c(.25, .5, .75), .021, 5)
dskellam(1:10, .021, 5)
dskellam(, 5, 5)
dskellam(1, 5, 5)
dskellam(2, 5, 5)
dskellam(3, 5, 5)
dskellam(100, 5, 5)
dskellam(-100, 5, 5)
plot(-100:100, 5, 5)
plot(dskellam(-100:100, 5, 5))
pskellam(0, 5, 5)
pskellam(-1, 5, 5)
pskellam(-2, 5, 5)
pskellam(0, 5, 5) - pskellam(-1, 5, 5)
qskellam(c(.25, .5, .75), 5, 5)
qskellam(c(.25, .5, .75), 5, 7)
test.st
test.st <- mutate(test.st, arr.param = predict(arr_fit, newdata = test.st, type = "response"),
dep.param = predict(dep_fit, newdata = test.st, type = "response"))
test.st
qskellam(c(.25, .5, .75), 5, 7)
test.st <- mutate(test.st, arr.param = predict(arr_fit, newdata = test.st, type = "response"),
dep.param = predict(dep_fit, newdata = test.st, type = "response"),
q = qskellam(c(.25, .5, .75), arr.param, dep.param))
test.st
test.st %>% select(hour, weekday, q)
test.st <- mutate(test.st, arr.param = predict(arr_fit, newdata = test.st, type = "response"),
dep.param = predict(dep_fit, newdata = test.st, type = "response"),
q.25 = qskellam(.25, arr.param, dep.param),
q.50 = qskellam(.50, arr.param, dep.param)
q.75 = qskellam(.75, arr.param, dep.param))
test.st <- mutate(test.st, arr.param = predict(arr_fit, newdata = test.st, type = "response"),
dep.param = predict(dep_fit, newdata = test.st, type = "response"),
q.25 = qskellam(.25, arr.param, dep.param),
q.50 = qskellam(.50, arr.param, dep.param),
q.75 = qskellam(.75, arr.param, dep.param))
tes.st
test.st
test.st %>% select(hour, weekday, q.25, q.50, q.75)
kable(test.st %>% select(hour, weekday, q.25, q.50, q.75))
kable(head(test.st %>% select(hour, weekday, q.25, q.50, q.75)))
kable(head(test.st %>% select(hour, weekday, q.25, q.50, q.75), 10))
kable(head(test.st %>% select(hour, weekday, q.25, q.50, q.75), 15))
arr.fit <- glm(arrivals ~ weekday + hour + weekday:hour, data = train.st, family = "poisson")
dep.fit <- glm(departures ~ weekday + hour + weekday:hour, data = train.st, family = "poisson")
test.st <- mutate(test.st, arr.param = predict(arr_fit, newdata = test.st, type = "response"),
dep.param = predict(dep_fit, newdata = test.st, type = "response"),
q.25 = qskellam(.25, arr.param, dep.param),
q.50 = qskellam(.50, arr.param, dep.param),
q.75 = qskellam(.75, arr.param, dep.param))
kable(head(test.st %>% select(hour, weekday, q.25, q.50, q.75), 15))
?head
file_paths <- getFilePaths()
weather_data <- rbind(read_csv(file_paths$weather[2]),
read_csv(file_paths$weather[3]))
weather_data
weather_data
weather_data <- weather_data %>%
mutate(time = as.POSIXct(PDT, format = "%m/%d/%Y"),
year = format(time, "%Y"),
month = format(time, "%m"),
day = format(time, "%d"))
weather_data %>% select(PDT, year, month, day)
file_paths <- getFilePaths()
trip_data <- rbind(read_csv(file_paths$trip[2]),
read_csv(file_paths$trip[3]))
weather_data <- rbind(read_csv(file_paths$weather[2]),
read_csv(file_paths$weather[3]))
trip_data <- trip_data %>%
mutate(s.time = as.POSIXct(`Start Date`, format = "%m/%d/%Y %H:%M"),
s.year = format(s.time, "%Y"),
s.month = format(s.time, "%m"),
s.day = format(s.time, "%d"),
s.dow = format(s.time, "%a"),
s.hour = format(s.time, "%H"),
s.weekday = ifelse(format(s.time, "%u") < 6, "Weekday", "Weekend"),
e.time = as.POSIXct(`End Date`, format = "%m/%d/%Y %H:%M"),
e.year = format(e.time, "%Y"),
e.month = format(e.time, "%m"),
e.day = format(e.time, "%d"),
e.dow = format(e.time, "%a"),
e.hour = format(e.time, "%H"),
e.weekday = ifelse(format(e.time, "%u") < 6, "Weekday", "Weekend"))
departures <- trip_data %>%
group_by(`Start Terminal`, s.year, s.month, s.day, s.dow, s.hour, s.weekday) %>%
summarize(departures = n()) %>%
ungroup()
arrivals <- trip_data %>%
group_by(`End Terminal`, e.year, e.month, e.day, e.dow, e.hour, e.weekday) %>%
ungroup()
summarize(arrivals = n()) %>%
"dow", "hour", "weekday", "departures")
colnames(arrivals) <- c("station_id", "year", "month", "day",
"dow", "hour", "weekday", "arrivals")
colnames(departures) <- c("station_id", "year", "month", "day",
processed <- full_join(arrivals, departures)
date_range <- tbl_df(data.frame(date = seq.Date(from = as.Date("2014-03-01"),
to = as.Date("2015-08-31"),
by = 1))) %>%
mutate(year = format(date, "%Y"),
month = format(date, "%m"),
day = format(date, "%d"),
dow = format(date, "%a"),
weekday = ifelse(format(date, "%u") < 6, "Weekday", "Weekend"),
join_key = "") %>%
full_join(data.frame(station_id = unique(processed$station_id), join_key = "")) %>%
full_join(data.frame(hour = str_pad(as.character(0:23), width = 2, side = "left", pad = "0"),
join_key = "")) %>%
select(station_id, year, month, day, dow, hour, weekday)
arrivals <- trip_data %>%
group_by(`End Terminal`, e.year, e.month, e.day, e.dow, e.hour, e.weekday) %>%
summarize(arrivals = n()) %>%
ungroup()
colnames(departures) <- c("station_id", "year", "month", "day",
"dow", "hour", "weekday", "departures")
colnames(arrivals) <- c("station_id", "year", "month", "day",
"dow", "hour", "weekday", "arrivals")
processed <- full_join(arrivals, departures)
date_range <- tbl_df(data.frame(date = seq.Date(from = as.Date("2014-03-01"),
to = as.Date("2015-08-31"),
by = 1))) %>%
mutate(year = format(date, "%Y"),
month = format(date, "%m"),
day = format(date, "%d"),
dow = format(date, "%a"),
weekday = ifelse(format(date, "%u") < 6, "Weekday", "Weekend"),
join_key = "") %>%
full_join(data.frame(station_id = unique(processed$station_id), join_key = "")) %>%
full_join(data.frame(hour = str_pad(as.character(0:23), width = 2, side = "left", pad = "0"),
join_key = "")) %>%
select(station_id, year, month, day, dow, hour, weekday)
processed <- left_join(date_range, processed)
processed[is.na(processed)] = 0
processed
processed
station_data <- rbind(read_csv(file_paths$station[2]),
read_csv(file_paths$station[3]))
station_data
station_data <- rbind(read_csv(file_paths$station[2]),
read_csv(file_paths$station[3])) %>%
select(station_id, landmark)
station_id
station_data
filter(station_data, station_id == 2)
station_data <- rbind(read_csv(file_paths$station[2]),
read_csv(file_paths$station[3])) %>%
select(station_id, landmark) %>%
group_by(station_id, landmark) %>%
filter(row_number() == 1) %>%
ungroup()
station_data
filter(station_data, station_id == 2)
station_data$landmark
unique(station_data$landmark)
unique(station_data$zip)
station_data
weather_data
weather_data$Z
weather_data$Zip
unique(weather_data$Zip)
station_data$zip <- sapply(station_data$landmark, function(l) {
if (l == "San Francisco") 94107
else if (l == "Redwood City") 94063
else if (l == "Palo Alto") 94301
else if (l == "Mountain View") 94041
else if (l == "San Jose") 95113
})
station_data$zip
weather_data
station_data$Zip <- sapply(station_data$landmark, function(l) {
if (l == "San Francisco") 94107
else if (l == "Redwood City") 94063
else if (l == "Palo Alto") 94301
else if (l == "Mountain View") 94041
else if (l == "San Jose") 95113
})
station_data
processed <- inner_join(processed, station_data)
processed
station_data
processed
weather_data
weather_data <- weather_data %>%
mutate(time = as.POSIXct(PDT, format = "%m/%d/%Y"),
year = format(time, "%Y"),
month = format(time, "%m"),
day = format(time, "%d"))
weather_data
processed
weather_data <- weather_data %>%
mutate(time = as.POSIXct(PDT, format = "%m/%d/%Y"),
year = format(time, "%Y"),
month = format(time, "%m"),
day = format(time, "%d")) %>%
select(year, month, day, Zip, `Mean TemperatureF`, `Mean Humidity`,
`Mean Wind SpeedMPH`)
weather_data
processed <- inner_join(processed, weather_data)
processed
#' Retrieve paths for the relevant data files
#'
#' @return a list containing full file paths under category names
getFilePaths = function(){
dir <- "~/Documents/Projects/BikeShare/data/"
prefixes <- c("201402", "201408", "201508")
list(trip = paste0(dir, prefixes, "_trip_data.csv"),
status = paste0(dir, prefixes, "_status_data.csv"),
station = paste0(dir, prefixes, "_station_data.csv"),
weather = paste0(dir, prefixes, "_weather_data.csv"))
}
#' Build the processed data set
#'
#' @description Derive hourly arrivals and departures from the trip data
#' @return tbl_df with the processed data set
getProcessedTripData <- function(){
file_paths <- getFilePaths()
trip_data <- rbind(read_csv(file_paths$trip[2]),
read_csv(file_paths$trip[3]))
weather_data <- rbind(read_csv(file_paths$weather[2]),
read_csv(file_paths$weather[3]))
station_data <- rbind(read_csv(file_paths$station[2]),
read_csv(file_paths$station[3])) %>%
select(station_id, landmark) %>%
group_by(station_id, landmark) %>%
filter(row_number() == 1) %>%
ungroup()
station_data$Zip <- sapply(station_data$landmark, function(l) {
if (l == "San Francisco") 94107
else if (l == "Redwood City") 94063
else if (l == "Palo Alto") 94301
else if (l == "Mountain View") 94041
else if (l == "San Jose") 95113
})
# add derived date fields to the trip data
trip_data <- trip_data %>%
mutate(s.time = as.POSIXct(`Start Date`, format = "%m/%d/%Y %H:%M"),
s.year = format(s.time, "%Y"),
s.month = format(s.time, "%m"),
s.day = format(s.time, "%d"),
s.dow = format(s.time, "%a"),
s.hour = format(s.time, "%H"),
s.weekday = ifelse(format(s.time, "%u") < 6, "Weekday", "Weekend"),
e.time = as.POSIXct(`End Date`, format = "%m/%d/%Y %H:%M"),
e.year = format(e.time, "%Y"),
e.month = format(e.time, "%m"),
e.day = format(e.time, "%d"),
e.dow = format(e.time, "%a"),
e.hour = format(e.time, "%H"),
e.weekday = ifelse(format(e.time, "%u") < 6, "Weekday", "Weekend"))
# pull out departures and arrivals
departures <- trip_data %>%
group_by(`Start Terminal`, s.year, s.month, s.day, s.dow, s.hour, s.weekday) %>%
summarize(departures = n()) %>%
ungroup()
arrivals <- trip_data %>%
group_by(`End Terminal`, e.year, e.month, e.day, e.dow, e.hour, e.weekday) %>%
summarize(arrivals = n()) %>%
ungroup()
# rename columns to match for joining
colnames(departures) <- c("station_id", "year", "month", "day",
"dow", "hour", "weekday", "departures")
colnames(arrivals) <- c("station_id", "year", "month", "day",
"dow", "hour", "weekday", "arrivals")
# join to combine arrivals and departures columns into one df
processed <- full_join(arrivals, departures)
# need to pad with rows for which there were zero arrivals and departures, so
# we first need to get a grid with all combinations of station_id, year, month, day, etc.
# I use the join_key = "" to simulate Cartestian product
date_range <- tbl_df(data.frame(date = seq.Date(from = as.Date("2014-03-01"),
to = as.Date("2015-08-31"),
by = 1))) %>%
mutate(year = format(date, "%Y"),
month = format(date, "%m"),
day = format(date, "%d"),
dow = format(date, "%a"),
weekday = ifelse(format(date, "%u") < 6, "Weekday", "Weekend"),
join_key = "") %>%
full_join(data.frame(station_id = unique(processed$station_id), join_key = "")) %>%
full_join(data.frame(hour = str_pad(as.character(0:23), width = 2, side = "left", pad = "0"),
join_key = "")) %>%
select(station_id, year, month, day, dow, hour, weekday)
# join date grid with processed df
processed <- left_join(date_range, processed)
# outer joins fill with NA's, so we need to convert these to 0's
processed[is.na(processed)] = 0
# add column for net change
processed <- mutate(processed, net = arrivals - departures)
# add zips to join with weather data
processed <- inner_join(processed, station_data)
# extract date from weather data
weather_data <- weather_data %>%
mutate(time = as.POSIXct(PDT, format = "%m/%d/%Y"),
year = format(time, "%Y"),
month = format(time, "%m"),
day = format(time, "%d")) %>%
select(year, month, day, Zip, `Mean TemperatureF`, `Mean Humidity`,
`Mean Wind SpeedMPH`)
# append weather info
processed <- inner_join(processed, weather_data)
# change to factors
processed$weekday <- factor(processed$weekday)
processed$hour <- factor(processed$hour)
return(processed)
}
full <- getProcessedTripData()
train <- full %>% filter(year == "2014" | (year == "2015" & month < "03"))
test <- full %>% filter(year == "2015" & month >= "03")
train
ARR_FORM <- arrivals ~ weekday + hour + weekday:hour + `Mean TemperatureF` + `Mean Humidity` + `Mean Wind SpeedMPH`
DEP_FORM <- departures ~ weekday + hour + weekday:hour + `Mean TemperatureF` + `Mean Humidity` + `Mean Wind SpeedMPH`
NET_FORM <- net ~ weekday + hour + weekday:hour + `Mean TemperatureF` + `Mean Humidity` + `Mean Wind SpeedMPH`
train.st <- filter(train, station_id == 69)
test.st <- filter(test, station_id == 69)
fitOLS(train.st, test.st)
fitRF(train.st, test.st)
train.st
fitPoisson(train.st, test.st)
fitOLS(train.st, test.st)
ARR_FORM <- arrivals ~ weekday + hour + weekday:hour + `Mean TemperatureF`
DEP_FORM <- departures ~ weekday + hour + weekday:hour + `Mean TemperatureF`
ARR_FORM <- arrivals ~ weekday + hour + weekday:hour + `Mean TemperatureF`
DEP_FORM <- departures ~ weekday + hour + weekday:hour + `Mean TemperatureF`
NET_FORM <- net ~ weekday + hour + weekday:hour + `Mean TemperatureF`
fitPoisson(train.st, test.st)
fitOLS(train.st, test.st)
evaluate <- function(obs, preds) {
mse <- mean(abs(obs - preds)**2)
mse.log.resp <- mean(abs(log(obs) - log(preds))**2)
list(mse = mse)
}
fitPoisson(train.st, test.st)
log(0)
log(1)
evaluate <- function(obs, preds) {
mse <- mean(abs(obs - preds)**2)
mse.log.resp <- mean(abs(log(obs + 1) - log(preds + 1))**2)
list(mse = mse)
}
fitPoisson(train.st, test.st)
obs + 1
evaluate <- function(obs, preds) {
mse <- mean(abs(obs - preds)**2)
mae <- mean(abs(obs - preds))
list(mse = mse,
mae = mae)
}
fitPoisson(train.st, test.st)
fitOLS(train.st, test.st)
station_data
station_data <- rbind(read_csv(file_paths$station[2]),
read_csv(file_paths$station[3]))
station_dat
station_data
train.st <- filter(train, station_id == 2)
test.st <- filter(test, station_id == 2)
fitOLS(train.st, test.st)
fitPoisson(train.st, test.st)
station_data
filter(station_data, landmark == "San Francisco")
train.st <- filter(train, station_id == 39)
test.st <- filter(test, station_id == 39)
fitOLS(train.st, test.st)
fitPoisson(train.st, test.st)
filter(station_data, landmark == "San Francisco")
train.st <- filter(train, station_id == 50)
test.st <- filter(test, station_id == 50)
fitOLS(train.st, test.st)
fitPoisson(train.st, test.st)
filter(station_data, landmark == "San Francisco")
filter(station_data, landmark == "San Francisco")[10:20,]
train.st <- filter(train, station_id == 58)
test.st <- filter(test, station_id == 58)
fitOLS(train.st, test.st)
fitPoisson(train.st, test.st)
library(boot)
arr_fit <- glm(ARR_FORM, data = train, family = "poisson")
arr_fit <- glm(ARR_FORM, data = train.st, family = "poisson")
arr_fit
arr_fit <- cv.glm(ARR_FORM, data = train.st, family = "poisson")
?cv.glm
cv.glm(train.st, arr_fit)
station_data
station_data %>% group_by(landmark) %>% summarize(c = n())
